#!/usr/bin/env ruby

require 'optparse'
require 'logger'

$LOAD_PATH.unshift File.join(File.dirname(__FILE__), "..", "lib")

Signal.trap("SIGPIPE", "SYSTEM_DEFAULT")
require 'pin2dmd_dump'

options = {test_run: false}
OptionParser.new do |opts|
  opts.banner = "Usage: example.rb [options]"

  opts.on("-v", "--[no-]verbose", "Run verbosely") do |x|
    options[:verbose] = x
  end

  opts.on("-t", "--[no-]test", "Run in test mode (does not write)") do |x|
    options[:test_run] = x
  end

  opts.on("-o FILE", "Output directory") do |x|
    options[:output_file] = x
  end

  opts.on("-i FILE", "Input file") do |x|
    options[:input_file] = x
  end

  opts.on("-f FRAME", "--frame FRAME", "Frame number to use from input") do |x|
    options[:frame] = x.to_i
  end

  opts.on("-s SCORE", "--score SCORE", "Digits in frame, including separators") do |x|
    options[:score] = x.chars
  end
end.parse!

filename = options.fetch(:input_file)
$logger = Logger.new(STDOUT)
$logger.info("Running in test mode") if options.fetch(:test_run)
$logger.info("Loading #{filename}")
dump = Pin2DmdDump.from_file(filename)
$logger.info("Loaded #{filename}")

$logger.info("Frames: #{dump.frames.length}")


mask = Marshal.load(File.read("masks/dm/ball.raw"))

f = dump.frames.fetch(options.fetch(:frame))
image = f.monochrome_image
if image.matches_mask?(mask)
  $logger.info("Processing frame #{options.fetch(:frame)}:\n" + image.formatted)
  image.mask!(0, 0, 128, 23) # extract just the numbers

  region_start = nil
  bounds = []

  (0...image.width).each do |x|
    empty = image.region_empty?(x, 0, 1, 23)
    if !region_start && !empty
      region_start = x
    elsif region_start && empty
      bounds << [region_start, x]
      region_start = nil
    end
  end

  names = options.fetch(:score)
  digits = []
  bounds.zip(names).each do |bound, name|
    name = "separator" if name == ","
    digit_filename = File.join(options.fetch(:output_file), name + ".raw")
    image.mask!(bound[0], 0, bound[1] - bound[0], 23)
    number = image.fit_to_content
    $logger.info("Exporting to #{digit_filename}")
    File.write(digit_filename, Marshal.dump(number)) unless options[:test_run]
  end
else
  $logger.error("Frame does not match ball mask!\n" + image.formatted)
end
$logger.info("Test mode completed") if options.fetch(:test_run)
